(function() {
  var AudioAnalyser, Visualizer, VisualizerBar, vis;

  Visualizer = class Visualizer {
    constructor(size) {
      this.windowResize = this.windowResize.bind(this);
      this.render = this.render.bind(this);
      this.size = size;
      this.levels = [];
      this.buildScene();
      this.buildGrid();
      window.addEventListener('resize', this.windowResize);
      this.render();
      $('input#fileselect').on('change', (e) => {
        var ref;
        if ((ref = this.analyser) != null) {
          ref.stop();
        }
        this.stream = URL.createObjectURL($('input#fileselect')[0].files[0]);
        return this.startAnalyser();
      });
    }

    play(data) {
      this.stream = data;
      return this.startAnalyser();
    }

    buildScene() {
      this.scene = new THREE.Scene();
      this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
      this.renderer = new THREE.WebGLRenderer({
        antialias: true
      });
      this.renderer.setSize(window.innerWidth, window.innerHeight);
      document.body.appendChild(this.renderer.domElement);
      this.scene.add(new THREE.AmbientLight(0x303030));
      this.light = new THREE.DirectionalLight(0xffffff, 1);
      this.scene.add(this.light);
      this.positionLight();
      return this.positionCamera();
    }

    windowResize() {
      this.renderer.setSize(window.innerWidth, window.innerHeight);
      this.camera.aspect = window.innerWidth / window.innerHeight;
      return this.camera.updateProjectionMatrix();
    }

    buildGrid() {
      var bar, col, row;
      this.grid = new THREE.Object3D();
      this.scene.add(this.grid);
      return this.bars = (function() {
        var i, ref, results;
        results = [];
        for (row = i = 0, ref = this.size; (0 <= ref ? i < ref : i > ref); row = 0 <= ref ? ++i : --i) {
          results.push((function() {
            var j, ref1, results1;
            results1 = [];
            for (col = j = 0, ref1 = this.size; (0 <= ref1 ? j < ref1 : j > ref1); col = 0 <= ref1 ? ++j : --j) {
              bar = new VisualizerBar(row, col, this.size);
              this.grid.add(bar.mesh);
              results1.push(bar);
            }
            return results1;
          }).call(this));
        }
        return results;
      }).call(this);
    }

    startAnalyser() {
      this.analyser = new AudioAnalyser(this.stream, this.size, 0.5);
      this.analyser.onUpdate = (bands) => {
        return this.updateLevels(bands);
      };
      this.analyser.start();
      $('.pause').on('click', () => {
        return this.analyser.stop();
      });
      return $('.play').on('click', () => {
        return this.analyser.start();
      });
    }

    positionCamera() {
      this.camera.position.y = 18;
      this.camera.position.x = 20;
      this.camera.position.z = 0;
      this.camera.lookAt(this.scene.position);
      return this.camera.position.y = 10;
    }

    positionLight() {
      this.light.position.y = 2;
      this.light.position.x = 0;
      return this.light.position.z = -1;
    }

    updateLevels(bands) {
      this.levels.unshift(Array.prototype.slice.call(bands));
      if (this.levels.length > 16) {
        return this.levels.pop();
      }
    }

    updateBars() {
      var bar, i, len, ref, results, row, x, y;
      ref = this.bars;
      results = [];
      for (x = i = 0, len = ref.length; i < len; x = ++i) {
        row = ref[x];
        results.push((function() {
          var j, len1, ref1, results1;
          results1 = [];
          for (y = j = 0, len1 = row.length; j < len1; y = ++j) {
            bar = row[y];
            results1.push(bar.setLevel((ref1 = this.levels[x]) != null ? ref1[y] : void 0));
          }
          return results1;
        }).call(this));
      }
      return results;
    }

    render(t = 0) {
      requestAnimationFrame(this.render);
      this.updateBars();
      this.grid.rotation.y = t / 3000;
      return this.renderer.render(this.scene, this.camera);
    }

  };

  VisualizerBar = class VisualizerBar {
    constructor(row, col, size) {
      var geometry, material;
      this.level = 0;
      this.row = row;
      this.col = col;
      this.size = size;
      this.spacing = 1.8;
      this.scale_factor = 3;
      this.offset = this.size * this.spacing / 2 - 1;
      material = new THREE.MeshLambertMaterial({
        color: this.color(),
        ambient: this.color()
      });
      geometry = new THREE.BoxGeometry(1, 1, 1);
      this.mesh = new THREE.Mesh(geometry, material);
      this.mesh.position.set(this.xPos(), 0, this.zPos());
      this.setLevel();
    }

    xPos() {
      return this.row * this.spacing - this.offset;
    }

    zPos() {
      return this.col * this.spacing - this.offset;
    }

    setLevel(l = 0.1) {
      if (l < 0.1) {
        l = 0.1;
      }
      if (this.level !== l / 255) {
        this.level = l / 255;
        this.mesh.scale.y = this.level * this.scale_factor;
        return this.mesh.position.y = this.level * this.scale_factor / 2;
      }
    }

    color() {
      var b, g, r, s;
      s = 255 / (this.size + 1) * 1.3;
      g = 255 - Math.ceil(this.col * s);
      b = 255 - Math.ceil(this.row * s);
      r = (200 - Math.ceil((this.row + this.col) / 2 * s * 1.5)) * -1;
      b = b < 0 ? 0 : b;
      g = g < 0 ? 0 : g;
      r = r < 0 ? 0 : r;
      return r * 65536 + g * 256 + b;
    }

  };

  AudioAnalyser = (function() {
    class AudioAnalyser {
      constructor(audio = new Audio(), numBands = 256, smoothing = 0.3) {
        var src;
        this.audio = audio;
        this.numBands = numBands;
        this.smoothing = smoothing;
        
        // construct audio object
        if (typeof this.audio === 'string') {
          src = this.audio;
          this.audio = new Audio();
          this.audio.controls = true;
          this.audio.src = src;
        }
        
        // setup audio context and nodes
        this.context = new AudioAnalyser.AudioContext();
        
        // createScriptProcessor so we can hook onto updates
        this.jsNode = this.context.createScriptProcessor(1024, 1, 1);
        
        // smoothed analyser with n bins for frequency-domain analysis
        this.analyser = this.context.createAnalyser();
        this.analyser.smoothingTimeConstant = this.smoothing;
        this.analyser.fftSize = this.numBands * 2;
        
        // persistant bands array
        this.bands = new Uint8Array(this.analyser.frequencyBinCount);
        // circumvent http://crbug.com/112368
        this.audio.addEventListener('canplay', () => {
          
          // media source
          this.source = this.context.createMediaElementSource(this.audio);
          // wire up nodes
          this.source.connect(this.analyser);
          this.analyser.connect(this.jsNode);
          this.jsNode.connect(this.context.destination);
          this.source.connect(this.context.destination);
          // update each time the JavaScriptNode is called
          return this.jsNode.onaudioprocess = () => {
            // retreive the data from the first channel
            this.analyser.getByteFrequencyData(this.bands);
            if (!this.audio.paused) {
              return typeof this.onUpdate === "function" ? this.onUpdate(this.bands) : void 0;
            }
          };
        });
      }

      start() {
        $('.controls').addClass('playing');
        return this.audio.play();
      }

      stop() {
        $('.controls').removeClass('playing');
        return this.audio.pause();
      }

    };

    //# Stole this class from soulwire
    //# https://codepen.io/soulwire/pen/Dscga
    AudioAnalyser.AudioContext = self.AudioContext || self.webkitAudioContext;

    AudioAnalyser.enabled = AudioAnalyser.AudioContext != null;

    return AudioAnalyser;

  }).call(this);

  vis = new Visualizer(16);

  window.loadData = (data) => {
    $('.overlay .title').text('Infected Mushroom - Symphonatic');
    return vis.play(data);
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=coffeescript